// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createDatabaseDetail = `-- name: CreateDatabaseDetail :exec
INSERT INTO DatabaseDetails (School_ID, Database_Name, Connection_URI, Region)
VALUES (?, ?, ?, ?)
`

type CreateDatabaseDetailParams struct {
	SchoolID      int64          `json:"school_id"`
	DatabaseName  string         `json:"database_name"`
	ConnectionUri string         `json:"connection_uri"`
	Region        sql.NullString `json:"region"`
}

func (q *Queries) CreateDatabaseDetail(ctx context.Context, arg CreateDatabaseDetailParams) error {
	_, err := q.db.ExecContext(ctx, createDatabaseDetail,
		arg.SchoolID,
		arg.DatabaseName,
		arg.ConnectionUri,
		arg.Region,
	)
	return err
}

const createSchool = `-- name: CreateSchool :exec
INSERT INTO Schools (School_Name, Subdomain, Status)
VALUES (?, ?, ?)
`

type CreateSchoolParams struct {
	SchoolName string `json:"school_name"`
	Subdomain  string `json:"subdomain"`
	Status     string `json:"status"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, createSchool, arg.SchoolName, arg.Subdomain, arg.Status)
	return err
}

const deleteDatabaseDetail = `-- name: DeleteDatabaseDetail :exec
DELETE FROM DatabaseDetails
WHERE Database_ID = ?
`

func (q *Queries) DeleteDatabaseDetail(ctx context.Context, databaseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteDatabaseDetail, databaseID)
	return err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM Schools
WHERE School_ID = ?
`

func (q *Queries) DeleteSchool(ctx context.Context, schoolID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, schoolID)
	return err
}

const getCreatedDatabaseDetail = `-- name: GetCreatedDatabaseDetail :one
SELECT Database_ID, School_ID, Database_Name, Connection_URI, Region, Created_At
FROM DatabaseDetails
WHERE Database_ID = last_insert_rowid()
`

func (q *Queries) GetCreatedDatabaseDetail(ctx context.Context) (DatabaseDetail, error) {
	row := q.db.QueryRowContext(ctx, getCreatedDatabaseDetail)
	var i DatabaseDetail
	err := row.Scan(
		&i.DatabaseID,
		&i.SchoolID,
		&i.DatabaseName,
		&i.ConnectionUri,
		&i.Region,
		&i.CreatedAt,
	)
	return i, err
}

const getCreatedSchool = `-- name: GetCreatedSchool :one
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
WHERE School_ID = last_insert_rowid()
`

func (q *Queries) GetCreatedSchool(ctx context.Context) (School, error) {
	row := q.db.QueryRowContext(ctx, getCreatedSchool)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getDatabaseDetailByID = `-- name: GetDatabaseDetailByID :one
SELECT Database_ID, School_ID, Database_Name, Connection_URI, Region, Created_At
FROM DatabaseDetails
WHERE Database_ID = ?
`

func (q *Queries) GetDatabaseDetailByID(ctx context.Context, databaseID int64) (DatabaseDetail, error) {
	row := q.db.QueryRowContext(ctx, getDatabaseDetailByID, databaseID)
	var i DatabaseDetail
	err := row.Scan(
		&i.DatabaseID,
		&i.SchoolID,
		&i.DatabaseName,
		&i.ConnectionUri,
		&i.Region,
		&i.CreatedAt,
	)
	return i, err
}

const getDatabaseDetailsBySchool = `-- name: GetDatabaseDetailsBySchool :many
SELECT Database_ID, School_ID, Database_Name, Connection_URI, Region, Created_At
FROM DatabaseDetails
WHERE School_ID = ?
ORDER BY Created_At DESC
`

func (q *Queries) GetDatabaseDetailsBySchool(ctx context.Context, schoolID int64) ([]DatabaseDetail, error) {
	rows, err := q.db.QueryContext(ctx, getDatabaseDetailsBySchool, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatabaseDetail
	for rows.Next() {
		var i DatabaseDetail
		if err := rows.Scan(
			&i.DatabaseID,
			&i.SchoolID,
			&i.DatabaseName,
			&i.ConnectionUri,
			&i.Region,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
WHERE School_ID = ?
`

func (q *Queries) GetSchoolByID(ctx context.Context, schoolID int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, schoolID)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getSchoolBySubdomain = `-- name: GetSchoolBySubdomain :one
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
WHERE Subdomain = ?
`

func (q *Queries) GetSchoolBySubdomain(ctx context.Context, subdomain string) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolBySubdomain, subdomain)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const listSchools = `-- name: ListSchools :many
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
ORDER BY Created_At DESC
`

func (q *Queries) ListSchools(ctx context.Context) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, listSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.SchoolID,
			&i.SchoolName,
			&i.Subdomain,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDatabaseRegion = `-- name: UpdateDatabaseRegion :exec
UPDATE DatabaseDetails
SET Region = ?
WHERE Database_ID = ?
`

type UpdateDatabaseRegionParams struct {
	Region     sql.NullString `json:"region"`
	DatabaseID int64          `json:"database_id"`
}

func (q *Queries) UpdateDatabaseRegion(ctx context.Context, arg UpdateDatabaseRegionParams) error {
	_, err := q.db.ExecContext(ctx, updateDatabaseRegion, arg.Region, arg.DatabaseID)
	return err
}

const updateSchoolStatus = `-- name: UpdateSchoolStatus :exec
UPDATE Schools
SET Status = ?
WHERE School_ID = ?
`

type UpdateSchoolStatusParams struct {
	Status   string `json:"status"`
	SchoolID int64  `json:"school_id"`
}

func (q *Queries) UpdateSchoolStatus(ctx context.Context, arg UpdateSchoolStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSchoolStatus, arg.Status, arg.SchoolID)
	return err
}
