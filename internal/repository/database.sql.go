// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: database.sql

package repository

import (
	"context"
	"database/sql"
)

const createDatabaseDetail = `-- name: CreateDatabaseDetail :one
INSERT INTO DatabaseDetails (Foreign_Database_ID, School_ID, Database_Name, Connection_URI)
VALUES (?, ?, ?, ?)
RETURNING Foreign_Database_ID, Database_ID, School_ID, Database_Name, Connection_URI, Created_At
`

type CreateDatabaseDetailParams struct {
	ForeignDatabaseID string `json:"foreign_database_id"`
	SchoolID          int64  `json:"school_id"`
	DatabaseName      string `json:"database_name"`
	ConnectionUri     string `json:"connection_uri"`
}

type CreateDatabaseDetailRow struct {
	ForeignDatabaseID string       `json:"foreign_database_id"`
	DatabaseID        int64        `json:"database_id"`
	SchoolID          int64        `json:"school_id"`
	DatabaseName      string       `json:"database_name"`
	ConnectionUri     string       `json:"connection_uri"`
	CreatedAt         sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateDatabaseDetail(ctx context.Context, arg CreateDatabaseDetailParams) (CreateDatabaseDetailRow, error) {
	row := q.db.QueryRowContext(ctx, createDatabaseDetail,
		arg.ForeignDatabaseID,
		arg.SchoolID,
		arg.DatabaseName,
		arg.ConnectionUri,
	)
	var i CreateDatabaseDetailRow
	err := row.Scan(
		&i.ForeignDatabaseID,
		&i.DatabaseID,
		&i.SchoolID,
		&i.DatabaseName,
		&i.ConnectionUri,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDatabaseDetail = `-- name: DeleteDatabaseDetail :exec
DELETE FROM DatabaseDetails
WHERE Database_ID = ?
`

func (q *Queries) DeleteDatabaseDetail(ctx context.Context, databaseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteDatabaseDetail, databaseID)
	return err
}

const getDatabaseDetailByID = `-- name: GetDatabaseDetailByID :one
SELECT Database_ID, Foreign_Database_ID, School_ID, Database_Name, Connection_URI, Created_At
FROM DatabaseDetails
WHERE Database_ID = ?
`

func (q *Queries) GetDatabaseDetailByID(ctx context.Context, databaseID int64) (DatabaseDetail, error) {
	row := q.db.QueryRowContext(ctx, getDatabaseDetailByID, databaseID)
	var i DatabaseDetail
	err := row.Scan(
		&i.DatabaseID,
		&i.ForeignDatabaseID,
		&i.SchoolID,
		&i.DatabaseName,
		&i.ConnectionUri,
		&i.CreatedAt,
	)
	return i, err
}

const getDatabaseDetailsByForeignID = `-- name: GetDatabaseDetailsByForeignID :many
SELECT Database_ID, Foreign_Database_ID, School_ID, Database_Name, Connection_URI, Created_At
FROM DatabaseDetails
WHERE Foreign_Database_ID = ?
`

func (q *Queries) GetDatabaseDetailsByForeignID(ctx context.Context, foreignDatabaseID string) ([]DatabaseDetail, error) {
	rows, err := q.db.QueryContext(ctx, getDatabaseDetailsByForeignID, foreignDatabaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatabaseDetail
	for rows.Next() {
		var i DatabaseDetail
		if err := rows.Scan(
			&i.DatabaseID,
			&i.ForeignDatabaseID,
			&i.SchoolID,
			&i.DatabaseName,
			&i.ConnectionUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDatabaseDetailsBySchool = `-- name: GetDatabaseDetailsBySchool :many
SELECT Database_ID, Foreign_Database_ID, School_ID, Database_Name, Connection_URI, Created_At
FROM DatabaseDetails
WHERE School_ID = ?
ORDER BY Created_At DESC
`

func (q *Queries) GetDatabaseDetailsBySchool(ctx context.Context, schoolID int64) ([]DatabaseDetail, error) {
	rows, err := q.db.QueryContext(ctx, getDatabaseDetailsBySchool, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatabaseDetail
	for rows.Next() {
		var i DatabaseDetail
		if err := rows.Scan(
			&i.DatabaseID,
			&i.ForeignDatabaseID,
			&i.SchoolID,
			&i.DatabaseName,
			&i.ConnectionUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
