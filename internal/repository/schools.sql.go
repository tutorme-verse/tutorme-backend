// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schools.sql

package repository

import (
	"context"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO Schools (School_Name, Subdomain, Status)
VALUES (?, ?, ?)
RETURNING School_ID, School_Name, Subdomain, Created_At, Status
`

type CreateSchoolParams struct {
	SchoolName string `json:"school_name"`
	Subdomain  string `json:"subdomain"`
	Status     string `json:"status"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool, arg.SchoolName, arg.Subdomain, arg.Status)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM Schools
WHERE School_ID = ?
`

func (q *Queries) DeleteSchool(ctx context.Context, schoolID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, schoolID)
	return err
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
WHERE School_ID = ?
`

func (q *Queries) GetSchoolByID(ctx context.Context, schoolID int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, schoolID)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getSchoolBySubdomain = `-- name: GetSchoolBySubdomain :one
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
WHERE Subdomain = ?
`

func (q *Queries) GetSchoolBySubdomain(ctx context.Context, subdomain string) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolBySubdomain, subdomain)
	var i School
	err := row.Scan(
		&i.SchoolID,
		&i.SchoolName,
		&i.Subdomain,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const listSchools = `-- name: ListSchools :many
SELECT School_ID, School_Name, Subdomain, Created_At, Status
FROM Schools
ORDER BY Created_At DESC
`

func (q *Queries) ListSchools(ctx context.Context) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, listSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.SchoolID,
			&i.SchoolName,
			&i.Subdomain,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchoolStatus = `-- name: UpdateSchoolStatus :exec
UPDATE Schools
SET Status = ?
WHERE School_ID = ?
`

type UpdateSchoolStatusParams struct {
	Status   string `json:"status"`
	SchoolID int64  `json:"school_id"`
}

func (q *Queries) UpdateSchoolStatus(ctx context.Context, arg UpdateSchoolStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSchoolStatus, arg.Status, arg.SchoolID)
	return err
}
